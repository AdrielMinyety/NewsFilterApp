{"version":3,"sources":["components/Form.js","components/Noticias.js","components/ListaNoticias.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","pais","categoria","actualizarState","e","setState","target","name","value","props","consultarApi","className","onChange","this","Component","Noticias","noticia","urlToImage","url","title","description","imagen","src","alt","style","maxHeight","href","rel","ListaNoticias","noticias","map","key","uuid","App","a","fetch","respuesta","json","articles","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PA+DeA,E,2MA3DXC,MAAQ,CACJC,KAAO,GACPC,UAAY,I,EAGhBC,gBAAkB,SAAAC,GAGd,EAAKC,SAAL,eACKD,EAAEE,OAAOC,KAAQH,EAAEE,OAAOE,QAC5B,WAGC,EAAKC,MAAMC,aAAa,EAAKV,MAAMC,KAAM,EAAKD,MAAME,e,wEAKxD,OACI,8BACA,yBAAKS,UAAU,YACX,yBAAKA,UAAU,OACX,4BACIA,UAAU,iCACVC,SAAUC,KAAKV,gBACfI,KAAK,aAEL,sDACA,4BAAQC,MAAM,YAAd,YACA,4BAAQA,MAAM,iBAAd,mBACA,4BAAQA,MAAM,UAAd,YACA,4BAAQA,MAAM,UAAd,SACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,WAAd,aAGR,yBAAKG,UAAU,OACX,4BACIA,UAAU,iCACVC,SAAUC,KAAKV,gBACfI,KAAK,QAEL,uCACA,4BAAQC,MAAM,MAAd,kBACA,4BAAQA,MAAM,MAAd,aACA,4BAAQA,MAAM,MAAd,qB,GA/CLM,aCwBJC,EAxBE,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACRC,EAAuCD,EAAvCC,WAAYC,EAA2BF,EAA3BE,IAAKC,EAAsBH,EAAtBG,MAAOC,EAAeJ,EAAfI,YAEzBC,EAAUJ,EACZ,yBAAKK,IAAML,EAAaM,IAAI,SAASZ,UAAU,eAAea,MAAO,CAACC,UAAW,WACnF,KACF,OACI,yBAAKd,UAAU,eACTU,EACF,yBAAKV,UAAU,aACX,wBAAIA,UAAU,oBAAqBQ,GACnC,2BAAKC,IAET,yBAAKT,UAAU,eACX,uBAAGA,UAAU,yBAAyBe,KAAOR,EAAMZ,OAAO,SAASqB,IAAI,uBAAvE,iB,iBCGDC,EAfO,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OAClB,yBAAKlB,UAAU,gBACVkB,EAASC,KAAI,SAAAd,GAAO,OACjB,kBAAC,EAAD,CACIe,IAAKC,MACLhB,QAASA,SC2CViB,E,2MAhDbjC,MAAQ,CACN6B,SAAW,I,EASbnB,a,sBAAe,gDAAAwB,EAAA,6DAAOjC,EAAP,+BAAc,KAAMC,EAApB,+BAAgC,UAGvCgB,EAHO,uDAG+CjB,EAH/C,qBAGgEC,EAHhE,qDAMWiC,MAAMjB,GANjB,cAMPkB,EANO,gBAOUA,EAAUC,OAPpB,OAOPR,EAPO,OAUb,EAAKxB,SAAS,CACZwB,SAAUA,EAASS,WAXR,4C,mFAHbzB,KAAKH,iB,+BAmBL,OACE,yBAAKC,UAAU,YACb,4BAAQA,UAAU,4CAChB,wBAAIA,UAAU,0BAAd,oBAGF,yBAAKA,UAAU,6BACb,kBAAC,EAAD,CACEkB,SAAUhB,KAAKb,MAAM6B,YAIzB,yBAAKlB,UAAU,mDACb,kBAAC,EAAD,CACED,aAAcG,KAAKH,qB,GAzCbI,aCQEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f8284cf9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Form extends Component {\r\n    state = {\r\n        pais : \"\",\r\n        categoria : \"\" \r\n    }\r\n\r\n    actualizarState = e => {\r\n        // si hay un cambio en el formulario, actualizar state con los nuevos datos.\r\n        // if there is a change in the form, update state with the new data.\r\n        this.setState({\r\n            [e.target.name] : e.target.value\r\n        }, () => {\r\n            // mediante un callback desde props, consultar api por cada cambio del state.\r\n            // through a Callback from props, request api for each change from state\r\n            this.props.consultarApi(this.state.pais, this.state.categoria);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form>\r\n            <div className=\"form-row\">\r\n                <div className=\"col\">\r\n                    <select \r\n                        className=\"custom-select font-weight-bold\"\r\n                        onChange={this.actualizarState}\r\n                        name=\"categoria\"    \r\n                    >\r\n                        <option>Tipos de noticias:</option>\r\n                        <option value=\"business\">Negocios</option>\r\n                        <option value=\"entertainment\">Entretenimiento</option>\r\n                        <option value=\"sports\">Deportes</option>\r\n                        <option value=\"health\">Salud</option>\r\n                        <option value=\"science\">Ciencia</option>\r\n                        <option value=\"technology\">Tecnologia</option>\r\n                        <option value=\"general\">General</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <select \r\n                        className=\"custom-select font-weight-bold\"\r\n                        onChange={this.actualizarState}\r\n                        name=\"pais\"\r\n                    >\r\n                        <option>De:</option>\r\n                        <option value=\"us\">Estados Unidos</option>\r\n                        <option value=\"ve\">Venezuela</option>\r\n                        <option value=\"mx\">México</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n// descripbir tipo de Props\r\n// describe props types\r\nForm.propTypes = {\r\n    consultarApi : PropTypes.func.isRequired\r\n}\r\nexport default Form;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Noticias = ({noticia}) => {\r\n    const {urlToImage, url, title, description} = noticia;\r\n\r\n    const imagen = (urlToImage) ? \r\n        <img src={ urlToImage } alt=\"Imagen\" className=\"card-img-top\" style={{maxHeight: 200 + \"px\"}}/>\r\n    : null;\r\n    return (\r\n        <div className=\"card shadow\">\r\n            { imagen }\r\n            <div className=\"card-body\">\r\n                <h4 className=\"font-weight-bold\">{ title }</h4>\r\n                <p>{ description }</p>\r\n            </div>\r\n            <div className=\"card-footer\">\r\n                <a className=\"btn btn-info btn-block\" href={ url } target=\"_blank\" rel=\"noopener noreferrer\">Ver más</a>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n// descripbir tipo de Props\r\n// describe props types\r\nNoticias.propTypes = {\r\n    noticia : PropTypes.object.isRequired\r\n}\r\nexport default Noticias;","import React from 'react';\r\nimport Noticias from './Noticias';\r\nimport uuid from 'uuid';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ListaNoticias = ({noticias}) => (\r\n    <div className=\"card-columns\">\r\n        {noticias.map(noticia =>\r\n            <Noticias\r\n                key={uuid()}\r\n                noticia={noticia}\r\n            />\r\n        )}\r\n    </div>\r\n);\r\n// descripbir tipo de Props\r\n// describe props types\r\nListaNoticias.propTypes = {\r\n    noticias : PropTypes.array.isRequired\r\n}\r\nexport default ListaNoticias;","import React, { Component } from 'react';\nimport Form from './components/Form';\nimport ListaNoticias from './components/ListaNoticias';\n\nclass App extends Component {\n  state = {\n    noticias : [] \n  }\n\n  componentDidMount(){\n    // si el documento ha cargado, consultar API\n    // if the document has loaded, request API\n    this.consultarApi()\n  }\n\n  consultarApi = async (pais = \"us\", categoria = \"science\") => {\n    // consultar API con informacion predeterminada.\n    // request API with default data.\n    const url = `https://newsapi.org/v2/top-headlines?country=${pais}&category=${categoria}&apiKey=72233c3581624dc98f9862d77969b1e4`;\n    // esperar respuesta y convertir a JSON\n    // wait response and convert to JSON\n    const respuesta = await fetch(url);\n    const noticias = await respuesta.json();\n    // establecer datos en el State\n    // set data in the State\n    this.setState({\n      noticias: noticias.articles\n    })\n  }\n  \n  render() {\n    return (\n      <div className=\"App py-5\">\n        <header className=\"fixed-top p-3 mx-3 rounded-bottom shadow\">\n          <h3 className=\"text-center text-white\">News Filter App</h3>\n        </header>\n\n        <div className=\"container-fluid my-5 py-4\">\n          <ListaNoticias\n            noticias={this.state.noticias}\n          />\n        </div>\n\n        <div className=\"footer fixed-bottom p-3 mx-3 shadow rounded-top\">\n          <Form \n            consultarApi={this.consultarApi}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}